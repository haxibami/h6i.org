---
import "@pagefind/default-ui/css/ui.css";
---

<astro-search data-host={Astro.url.host}>
  <dialog id="modal">
    <div id="search"></div>
  </dialog>
  <button id="modal-button" title="Ctrl + K で検索">
    <div id="modal-button-label">
      <span>?</span>
    </div>
  </button>
</astro-search>

<style>
  #modal {
    width: calc(100% - 3rem);
    max-width: 50rem;
    max-height: calc(100% - 3rem);
    box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.25);
    background-color: color-mix(in srgb, var(--bg) 97%, var(--fg) 3%);
    margin: 1.5rem auto;
    padding: 1.5rem;
    overflow-y: auto;
    border-radius: 0.5rem;
    --pagefind-ui-background: var(--bg);
    --pagefind-ui-border: var(--ui-border);
    --pagefind-ui-text: var(--fg);
    --pagefind-ui-primary: var(--fg);
    --pagefind-ui-border-width: 1.5px;
    --pagefind-ui-font: initial;
    --pagefind-ui-tag: color-mix(in srgb, var(--fg10) 95%, var(--fg) 5%);
  }

  #modal::backdrop {
    background-color: hsla(223, 13%, 10%, 0.66);
    backdrop-filter: blur(0.25rem);
  }

  #modal-button-label {
    display: flex;
    justify-content: flex-end;
    border-bottom: 1.5px solid var(--ui-border);
    padding-inline: 0.5rem;
  }

  @media (min-width: 768px) {
    #modal-button-label {
      width: 6rem;
      padding-inline: 0;
    }
  }
</style>

<script>
  // @ts-expect-error - PagefindUI doesn't have types yet
  import { PagefindUI } from "@pagefind/default-ui";

  class AstroSearch extends HTMLElement {
    connectedCallback() {
      const host = this.dataset.host;
      new PagefindUI({
        element: "#search",
        autofocus: true,
        showEmptyFilters: false,
        translations: {
          clear_search: "クリア",
          zero_results: "[SEARCH_TERM] に一致する結果は見つかりませんでした",
        },
        // @ts-expect-error - PagefindUI doesn't have types yet
        processResult: function (result) {
          const ogImgPath = new URL(result.meta.image);
          if (ogImgPath.host === host) {
            result.meta.image = ogImgPath.pathname;
          }
        },
      });

      const modalButton = this.querySelector("#modal-button");
      const modal = this.querySelector("#modal") as HTMLDialogElement | null;

      if (modalButton && modal) {
        listen(modalButton, modal);
      }

      function listen(modalButton: Element, modal: HTMLDialogElement) {
        modalButton.addEventListener("click", () => {
          modal.showModal();
        });

        modal.addEventListener("click", (e) => {
          if (e.target === modal) {
            modal.close();
          }
        });

        window.addEventListener("keydown", (e) => {
          if (e.key === "Escape") {
            modal.close();
          }
          if (e.key === "k" && e.ctrlKey) {
            e.preventDefault();
            modal.showModal();
          }
        });
      }
    }
  }

  customElements.define("astro-search", AstroSearch);
</script>
