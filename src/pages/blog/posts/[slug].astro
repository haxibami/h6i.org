---
import "katex/dist/katex.min.css";

import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

import Article from "@/components/Article.astro";
import AstroImage from "@/components/AstroImage.astro";
import Link from "@/components/Link.astro";
import { ChevronCircleLeftIcon } from "@/components/Svg";
import Tags from "@/components/Tags.astro";
import Layout from "@/layouts/Layout.astro";

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  return posts.map((post) => {
    const slug = post.slug;
    return {
      params: {
        slug,
      },
      props: {
        post,
      },
    };
  });
}

const { Content } = await Astro.props.post.render();

const { post } = Astro.props;

export const components = {
  a: Link,
  figure: AstroImage,
};

const site = Astro.site ?? "";
---

<Layout
  title={post.data.title}
  description={post.data.description}
  path={`${post.collection}/posts/${post.slug}`}
  og={{
    enabled: true,
    width: 1200,
    height: 630,
    image: new URL(`/api/og/article/${post.collection}/${post.slug}.png`, site),
    type: "article",
  }}
>
  <main class="post-main">
    <header>
      <div class="emoji-container">
        <span class="emoji">{post.data.emoji}</span>
      </div>
      <h1>{post.data.title}</h1>
      <div class="tags-container">
        <Tags tags={post.data.tags} collectionKey={post.collection} />
      </div>
      <div class="post-info">
        <div>
          <div class="published-container">Published</div>
          <div>
            <time datetime={post.data.date.toISOString()}>
              {
                new Intl.DateTimeFormat("en-US", {
                  year: "numeric",
                  month: "short",
                  day: "numeric",
                }).format(post.data.date)
              }
            </time>
          </div>
        </div>
        {
          post.data.lastmod && (
            <div>
              <div class="lastmod-container">Last Modified</div>
              <div>
                <time datetime={post.data.lastmod.toISOString()}>
                  {new Intl.DateTimeFormat("en-US", {
                    year: "numeric",
                    month: "short",
                    day: "numeric",
                  }).format(post.data.lastmod)}
                </time>
              </div>
            </div>
          )
        }
      </div>
    </header>
    <Article>
      <Content components={components} />
    </Article>
    <nav>
      <span class="button-container">
        <a href={`/${post.collection}`} class="pager-link">
          <span class="pager-button">
            <ChevronCircleLeftIcon class="nav-icon" />
            Top
          </span>
        </a>
      </span>
    </nav>
  </main>
</Layout>

<style is:global>
  /* should also be applied to <article>, which is generated from Markdown */
  .post-main > :not([hidden]) ~ :not([hidden]) {
    border-top: 1px solid var(--line);
  }
</style>

<style>
  main {
    display: flex;
    padding-top: 2rem;
    padding-bottom: 2rem;
    flex-direction: column;
    flex-grow: 1;
  }

  header {
    display: flex;
    margin-bottom: 2rem;
    flex-direction: column;
    gap: 1.5rem;
  }

  .emoji-container {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .emoji {
    font-size: 3.75rem;
    line-height: 1;
  }

  h1 {
    text-align: center;
  }

  .tags-container {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .post-info {
    display: flex;
    gap: 2rem;
    justify-content: center;
    align-items: center;
    text-align: center;
  }

  .published-container {
    color: var(--secondary);
  }

  .lastmod-container {
    color: var(--secondary);
  }

  nav {
    display: flex;
    padding-top: 2rem;
    margin-top: 2rem;
    flex-direction: row;
    gap: 2rem;
    justify-content: flex-start;
    width: 100%;
    font-size: 1.25rem;
    line-height: 1.75rem;
  }

  .button-container {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 6rem;
    height: 2rem;
  }

  .pager-link {
    width: 100%;
    height: 100%;
  }

  .pager-button {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    transition-property: background-color, border-color, color, fill, stroke,
      opacity, box-shadow, transform;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
    color: var(--prevfg);

    &:hover {
      background-color: var(--hover);
    }
  }

  .nav-icon {
    width: 1rem;
    height: 1rem;
    fill: currentColor;
  }
</style>
