---
import { getCollection, getEntry } from "astro:content";
import type { CollectionEntry } from "astro:content";
import type { Page, PaginateFunction } from "astro";

import Posts from "@/components/Posts.astro";
import Layout from "@/layouts/Layout.astro";
import { COUNT_PER_PAGE } from "@/lib/constant";

export interface Props {
  page: Page<CollectionEntry<"blog">>;
}

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  const posts = (await getCollection("blog"))
    .sort(
      (a, b) =>
        (a.data.lastmod ?? a.data.date).getTime() -
        (b.data.lastmod ?? b.data.date).getTime(),
    )
    .reverse();
  return paginate(posts, { pageSize: COUNT_PER_PAGE });
}

const meta = await getEntry("data", "meta");

const { page } = Astro.props;
---

<Layout
  title={meta.data.top.title}
  description={meta.data.blog.description}
  path={page.url.current}
  pagefind={false}
  og={{ enabled: true }}
>
  <main>
    <Posts page={page} />
  </main>
</Layout>

<style>
  main {
    display: flex;
    padding-top: 2rem;
    padding-bottom: 2rem;
    flex-direction: column;
    flex-grow: 1;
    gap: 2rem;
  }
</style>
