---
import { getCollection, getEntry } from "astro:content";
import type { CollectionEntry } from "astro:content";
import type { Page, PaginateFunction } from "astro";

import Posts from "@/components/Posts.astro";
import Layout from "@/layouts/Layout.astro";
import { COUNT_PER_PAGE } from "@/lib/constant";

interface Props {
  page: Page<CollectionEntry<"blog">>;
}

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  const allPosts = await getCollection("blog");
  const categories = [
    ...new Set(allPosts.flatMap((post) => post.data.tags ?? [])),
  ];
  const paginates = categories.flatMap((category) => {
    const posts = allPosts
      .filter((post) => post.data.tags?.includes(category))
      .sort((a, b) => {
        const diff =
          (b.data.lastmod ?? b.data.date).getTime() -
          (a.data.lastmod ?? a.data.date).getTime();
        const order = (b.data.order ?? 0) - (a.data.order ?? 0);
        return diff === 0 ? order : diff;
      });
    return paginate(posts, {
      pageSize: COUNT_PER_PAGE,
      params: { category },
    });
  });
  return paginates;
}

const meta = await getEntry("data", "data");

const { page } = Astro.props;
const params = Astro.params;
---

<Layout
  title=`#${params.category} | ${meta!.data.top.title}`
  description={meta!.data.blog.description}
  pagefind={false}
  og={{ enabled: true }}
>
  <h1>
    {params.category}
  </h1>
  <Posts page={page} />
</Layout>

<style>
  h1:before {
    content: "# ";
    color: var(--accent);
  }
</style>
