name: pr-test

on:
  pull_request:
  push:
    branches:
      - "main"

env:
  NODE_VERSION: 18
  PNPM_VERSION: latest
  WORKDIR: ./haxibami.net
  VERCEL_ORG_ID: ${{ secrets.ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.PROJECT_ID }}

jobs:
  test-preview:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKDIR }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: pnpm modules & next build cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
      - name: playwright binary cache
        id: playwright-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install node dependencies
        run: pnpm install
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      - name: Install playwright (without cache)
        run: pnpm playwright install chromium
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - name: Install playwright (with cache)
        run: pnpm playwright install-deps chromium
        if: steps.playwright-cache.outputs.cache-hit == 'true'
      - name: Install Vercel CLI
        run: pnpm install -g vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "DEPLOY_URL=$URL" >> $GITHUB_OUTPUT
      - name: Alias domain
        run: vercel alias set ${{ steps.deploy.outputs.DEPLOY_URL }} staging.haxibami.net
