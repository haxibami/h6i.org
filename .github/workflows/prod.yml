name: Production Deployment

on:
  push:
    branches:
      - main

env:
  PNPM_HOME: ~/.local/share/pnpm
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
  VERCEL_ORG_ID: ${{ secrets.ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.PROJECT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./haxibami.net
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Setup pnpm with corepack
        run: |
          corepack enable pnpm
          corepack prepare pnpm@latest --activate
          SHELL="$(which bash)" pnpm setup
          echo "${{ env.PNPM_HOME }}" >> $GITHUB_PATH
      - name: Get pnpm store path
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Setup pnpm store & build artifact cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
      - name: Setup playwright binary cache
        id: playwright-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      - name: Install node dependencies
        run: pnpm i --frozen-lockfile
      - name: Install playwright (without cache)
        run: pnpm playwright install --with-deps chromium
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - name: Install playwright (with cache)
        run: pnpm playwright install-deps chromium
        if: steps.playwright-cache.outputs.cache-hit == 'true'
      - name: Install Vercel CLI
        run: pnpm add -g vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
